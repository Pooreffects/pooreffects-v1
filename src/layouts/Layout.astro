---
import { SEO } from "astro-seo";
import Footer from "@components/footer.astro";
import Navbar from "@components/navbar/navbar.astro";
import "@fontsource-variable/inter/index.css";
import '@fontsource-variable/bricolage-grotesque';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "/opengraph.jpg",
  Astro.site
).toString();

const { title } = Astro.props;

const makeTitle = title
  ? title + " | " + "Pooreffects"
  : "Pooreffects - A hub for my digital garden, blog, and technology playground";
---

<!DOCTYPE html>
<html lang="en" transition:animate='fade'>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />

    <SEO
      title={makeTitle}
      description="Pooreffects - A hub for my digital garden, blog, and technology playground"
      canonical={canonicalURL}
      twitter={{
        creator: "@pooreffects",
        site: "@pooreffects",
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: `Pooreffects`,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "Pooreffects Homepage Screenshot",
        },
      }}
    />
  </head>
  <body class='bg-indigo-100 dark:bg-indigo-900 transition-all duration-300 ease-pooreeffects-ease'>
      <Navbar />
      <slot />
      <Footer />
      <style is:global>
        /* Improve Page speed */
        /* https://css-tricks.com/almanac/properties/c/content-visibility/ */
        img {
          content-visibility: auto;
        }
      </style>
  </body>
</html>

<script is:inline>
  // Function to get the theme from localStorage or system preference
  const getTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  // Function to apply the theme
  const applyTheme = (theme) => {
    document.documentElement.classList.toggle('dark', theme === 'dark');
    localStorage.setItem('theme', theme);
  };

  // Function to handle the theme toggle
  const handleThemeToggle = () => {
    const currentTheme = getTheme();
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    applyTheme(newTheme);
  };

  // Function to update the theme and attach event listeners
  const update = () => {
    const theme = getTheme();
    applyTheme(theme);

    const themeToggleBtn = document.getElementById("theme-toggle");
    if (themeToggleBtn) {
      themeToggleBtn.removeEventListener("click", handleThemeToggle); // Ensure no duplicate listeners
      themeToggleBtn.addEventListener("click", handleThemeToggle);
    }
  };

  // Event listeners for initial load and page swaps
  document.addEventListener("astro:after-swap", update);
  document.addEventListener("DOMContentLoaded", update);
</script>

