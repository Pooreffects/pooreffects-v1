---
import { SEO } from "astro-seo";
import Footer from "@components/footer.astro";
import Navbar from "@components/navbar/navbar.astro";
import "@fontsource-variable/inter/index.css";
import '@fontsource-variable/bricolage-grotesque';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "/opengraph.jpg",
  Astro.site
).toString();

const { title } = Astro.props;

const makeTitle = title
  ? title + " | " + "Pooreffects"
  : "Pooreffects - A hub for my digital garden, blog, and technology playground";
---

<!DOCTYPE html>
<html lang="en" transition:animate='fade'>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />

    <SEO
      title={makeTitle}
      description="Pooreffects - A hub for my digital garden, blog, and technology playground"
      canonical={canonicalURL}
      twitter={{
        creator: "@pooreffects",
        site: "@pooreffects",
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: `Pooreffects`,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "Pooreffects Homepage Screenshot",
        },
      }}
    />
  </head>
  <body class="bg-indigo-100 dark:bg-indigo-900 transition-all duration-300 ease-pooreffects-ease">
    <div class="noise absolute top-0 left-0 w-full h-full z-1 opacity-10"></div>
    <div class="block fixed top-0 left-0 w-full h-full overflow-hidden bg-bg-dark z-[-1]">
      <div class="absolute w-full h-full blur-[40px] filter-[url(#goo)]">
        <!-- Shape 1 -->
        <div class="absolute top-[20%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 
                    w-[40%] h-[40%] rounded-full mix-blend-hard-light animate-move-vertical 
                    bg-gradient-to-r from-teal-500 to-blue-500 
                    dark:bg-gradient-to-r dark:from-pink-300 dark:to-indigo-200"></div>
      
        <!-- Shape 2 -->
        <div class="absolute top-[50%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 
                    w-[30%] h-[30%] rounded-full mix-blend-hard-light animate-move-in-circle 
                    bg-gradient-to-r from-teal-500 to-blue-500 
                    dark:bg-gradient-to-r dark:from-pink-300 dark:to-indigo-200"></div>
      
        <!-- Shape 3 (Interactive) -->
        <div class="absolute top-[70%] left-[40%] transform -translate-x-1/2 -translate-y-1/2 
                    w-[50%] h-[50%] rounded-full mix-blend-hard-light animate-move-horizontal opacity-70 
                    bg-gradient-to-r from-teal-500 to-blue-500 
                    dark:bg-gradient-to-r dark:from-pink-300 dark:to-indigo-200 interactive"></div>
      </div>
      
      
    </div>
    <Navbar />
    <slot />
    <Footer />
  </body>
</html>


<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const interBubble = document.querySelector('.interactive');
    let curX = 0;
    let curY = 0;
    let tgX = 0;
    let tgY = 0;

    const move = () => {
      curX += (tgX - curX) / 20;
      curY += (tgY - curY) / 20;
      interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
      requestAnimationFrame(move);
    };

    window.addEventListener('mousemove', (event) => {
      tgX = event.clientX;
      tgY = event.clientY;
    });

    move();

    const getTheme = () => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };

    const applyTheme = (theme) => {
      document.documentElement.classList.toggle('dark', theme === 'dark');
      localStorage.setItem('theme', theme);
    };

    const handleThemeToggle = () => {
      const currentTheme = getTheme();
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      applyTheme(newTheme);
    };

    const update = () => {
      const theme = getTheme();
      applyTheme(theme);

      const themeToggleBtn = document.getElementById("theme-toggle");
      if (themeToggleBtn) {
        themeToggleBtn.removeEventListener("click", handleThemeToggle);
        themeToggleBtn.addEventListener("click", handleThemeToggle);
      }
    };

    document.addEventListener("astro:after-swap", update);
    update();
  });
</script>
